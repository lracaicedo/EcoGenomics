setwd("~/Documents/EcoGenomics/Scripts/03_01_17")
source("http://bioconductor.org/biocLite.R")
biocLite(c("AnnotationDbi", "impute", "GO.db", "preprocessCore"))
library("WGCNA")
install.packages("WGCNA")
library("WGCNA")
getwd();
library(WGCNA);
options(stringsAsFactors = FALSE);
femData = read.csv("LiverFemale3600.csv");
options(stringsAsFactors = FALSE);
starData = read.csv("norm.counts.csv");
dim(starData);
names(starData);
sdatExpr0 = as.data.frame(t(starData[, -c(1:1)]));
dim(sdatExpr0)
names(sdatExpr0) = starData$X;
rownames(sdatExpr0) = names(starData)[-c(1:1)];
gsg = goodSamplesGenes(datExpr0, verbose = 3);
sgsg = goodSamplesGenes(sdatExpr0, verbose = 3);
sgsg$allOK
source('~/Documents/EcoGenomics/Scripts/03_01_17/WCGNA_tutorial_SSW.R')
if (!sgsg$allOK)
{
# Optionally, print the gene and sample names that were removed:
if (sum(!sgsg$goodGenes)>0)
printFlush(paste("Removing genes:", paste(names(sdatExpr0)[!sgsg$goodGenes], collapse = ", ")));
if (sum(!gsg$goodSamples)>0)
printFlush(paste("Removing samples:", paste(rownames(sdatExpr0)[!sgsg$goodSamples], collapse = ", ")));
# Remove the offending genes and samples from the data:
datExpr0 = datExpr0[sgsg$goodSamples, sgsg$goodGenes]
}
if (sum(!sgsg$goodGenes)>0)
printFlush(paste("Removing genes:", paste(names(sdatExpr0)[!sgsg$goodGenes], collapse = ", ")));
if (sum(!gsg$goodSamples)>0)
printFlush(paste("Removing samples:", paste(rownames(sdatExpr0)[!sgsg$goodSamples], collapse = ", ")));
datExpr0 = datExpr0[sgsg$goodSamples, sgsg$goodGenes]
{
# Optionally, print the gene and sample names that were removed:
if (sum(!sgsg$goodGenes)>0)
printFlush(paste("Removing genes:", paste(names(sdatExpr0)[!sgsg$goodGenes], collapse = ", ")));
if (sum(!gsg$goodSamples)>0)
printFlush(paste("Removing samples:", paste(rownames(sdatExpr0)[!sgsg$goodSamples], collapse = ", ")));
# Remove the offending genes and samples from the data:
datExpr0 = datExpr0[sgsg$goodSamples, sgsg$goodGenes]
}
if (!sgsg$allOK)
{
# Optionally, print the gene and sample names that were removed:
if (sum(!sgsg$goodGenes)>0)
printFlush(paste("Removing genes:", paste(names(sdatExpr0)[!sgsg$goodGenes], collapse = ", ")));
if (sum(!gsg$goodSamples)>0)
printFlush(paste("Removing samples:", paste(rownames(sdatExpr0)[!sgsg$goodSamples], collapse = ", ")));
# Remove the offending genes and samples from the data:
datExpr0 = datExpr0[sgsg$goodSamples, sgsg$goodGenes]
}
sampleTree = hclust(dist(sdatExpr0), method = "average");
sizeGrWindow(12,9)
par(cex = 0.6);
par(mar = c(0,4,2,0))
plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5,
cex.axis = 1.5, cex.main = 2)
abline(h = 10, col = "red");
clust = cutreeStatic(sampleTree, cutHeight = 15, minSize = 10)
table(clust)
keepSamples = (clust==1)
sdatExpr = sdatExpr0[keepSamples, ]
nGenes = ncol(sdatExpr)
nSamples = nrow(sdatExpr)
abline(h = 20000000, col = "red");
clust = cutreeStatic(sampleTree, cutHeight = 20000000, minSize = 10)
table(clust)
keepSamples = (clust==1)
sdatExpr = sdatExpr0[keepSamples, ]
nGenes = ncol(sdatExpr)
nSamples = nrow(sdatExpr)
traitData = read.csv("ClinicalTraits.csv");
straitData = read.csv("cols_data_trim.txt");
dim(traitData)
names(straitData)
allTraits = traitData[, -c(31, 16)];
starSamples = rownames(sdatExpr);
straitRows = match(starSamples, allTraits$Mice);
straitRows = match(starSamples, straitData$Health);
datTraits = allTraits[traitRows, -1];
starSamples = rownames(sdatExpr);
straitRows = match(starSamples, straitData$Health);
sdatTraits = straitData[straitRows, -1];
rownames(sdatTraits) = straitData[straitRows, 1];
